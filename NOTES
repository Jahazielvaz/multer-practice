SEQUELIZE CLI COMMAND LIST: Here's a list of the most popular sequelize cli commands, so that you can use it for your project.

Sequelize CLI [Node: 6.11.2, CLI: 3.0.0, ORM: 4.8.0]

Commands:
  db:migrate                        Run pending migrations
  db:migrate:schema:timestamps:add  Update migration table to have timestamps
  db:migrate:status                 List the status of all migrations
  db:migrate:undo                   Reverts a migration
  db:migrate:undo:all               Revert all migrations ran
  db:seed                           Run specified seeder
  db:seed:undo                      Deletes data from the database
  db:seed:all                       Run every seeder
  db:seed:undo:all                  Deletes data from the database
  db:create                         Create database specified by configuration
  db:drop                           Drop database specified by configuration
  init                              Initializes project
  init:config                       Initializes configuration
  init:migrations                   Initializes migrations
  init:models                       Initializes models
  init:seeders                      Initializes seeders
  migration:generate                Generates a new migration file       [aliases: migration:create]
  model:generate                    Generates a model and its migration  [aliases: model:create]
  seed:generate                     Generates a new seed file            [aliases: seed:create]

Options:
  --version  Show version number                                         [boolean]
  --help     Show help                                                   [boolean]


MULTER:

BASIC SETUP:
  const storage = multer.diskStorage({
    destination: 'some-destination',
    filename: function(req, file, callback){

    }
  })

DESTINATION: Indicates where you want to save your files

FILENAME: Indicates how you want your files named. Multer doesn't add extensions to file names, so you have to take care of that on your own. Using crypto, you can generate a random 16 character string and attach the extension using path:


CRYPTO SETUP:
  crypto.pseudoRandomBytes(16, function(err, raw){
    if(err) return callback(err);

    callback(null, raw.toString('hex') + path.extname(file.originalname));
  })

  NOTE: I don't understand this part yet. We're going to have to research it further.

EXPRESS MIDDLEWARE SETUP:
  import bodyParser from 'body-parser';
  import morgan from 'morgan';
  import express from 'express';
  const app = express();

  app.use(bodyParser.json());
  app.use(bodyParser.urlencoded({extended: true}));
  app.use(morgan('dev'));

  NOTE: This is pretty standard stuff, no need to explain it.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                              MULTER
NOTE: THIS TUTORIAL IS BASED ON HOW I UNDERSTAND IT, AND I'M NOT USING MUCH OFFICIAL DOCUMENTATION, AS I HAVEN'T FOUND ANYTHING CONCISE ENOUGH YET.

MULTIPLE PARTS: To better understand it, let's divide it out into multiple parts FORM, STORAGE, UPLOAD, and POST ROUTE REQUEST:

//////////////DESCRIPTION OF EACH:

---------------------------------------------------------------------------------
FORM:
  SYNTAX:
  <form action="/" method="POST" id="uploadForm"  enctype="multipart/form-data">
    <input type="file" name="myFile"><br>
    <input type="submit" value="Upload File" name="submit">
  </form>

  ENCTYPE: Specifies how the form-data should be encoded when submitting it to the server. Can only be used if the method is post. In other words, from what I understand, this is how you determine what type of files you're going to be uploading.

    VALUES:
      APPLICATION/X-WWW-FORM-URLENCODED: Default. All characters are encoded before sent (spaces are converted to "+" symbols, and special characters are converted to ASCII HEX values)

      MULTIPART/FORM-DATA: No characters are encoded. This value is required when you are using forms that have file upload control.

      TEXT/PLAIN: Spaces are converted to "+" symbols, but no special characters are encoded.

      CONCLUSION: You're mainly going to be using multipart/form-data whenever you're dealing with files that are being uploaded.

  FILE INPUT: There's a special input field you must add, when you're uploading a file. This contains 2 vital parts that we're going to go over.

    SYNTAX:
      <input type="file" name="myFile">

    TYPE="FILE": This is how your form knows that you're uploading a file.

    NAME="MYFILE": This is how you can link your form to the logic in your file upload code. This is how they connect. In other words, this is how the 2 worlds meet.


---------------------------------------------------------------------------------
STORAGE: I believe this is how you tell the system where to store the file, and you can also give it errors, if the file is not uploaded succesfully. This is also where you can give it some constraints, such as the type of files you accept. This is also where you name the file.

  SYNTAX:
    const storage = multer.diskStorage({
      destination: './statics/uploads/images',
      filename: function(req, file, callback){
        if(!file.originalname.match(/\.(jpeg|png|jpg|wav)$/)){
          let err = new Error();
          err.code = 'filetype';
          return callback(err);
        } else {
          callback(null, file.originalname + '_' + Date.now());
        }
      }
      });

    DESTINATION: This is the path for where the uploaded file will be stored. I guess for storing it in aws, we need the multer s3.

    FILENAME:
      REQ:
      FILE:
      CALLBACK: From what I can tell, callback has 2 parameters: The error if any, and the file name (Here you can also add the date for it.)

        FILE.ORIGINALNAME: This built in value makes it so that the name of the file is what the user actually named the file.

        DATE.NOW(): This function stamps the date the file was uploaded, on the the name of the file.

      ERR.CODE: Multer has it's own error codes. From what I understand, the way it works, in this section you set the label for it, and in the following sections you set the value for it.


---------------------------------------------------------------------------------
UPLOAD: From what I understand, this section is where you specify more details about the file as it's being uploaded. You set this variable equal to the multer function, and within its parameter section, you have an object, in which you can make the desired specifications

  SYNTAX:
    const upload = multer({
      storage: storage,
      limits: {fileSize: 1000000}
    }).single('myFile');

  STORAGE: STORAGE:  I'm not super sure as to what this does, but I think it's mandatory, and I think the first "storage" you're setting the key, where as the value comes from the variable you defined above.

  LIMITS: I believe these are optional, and there's a variety of them that you can choose from, fileSize being one of them.

  .SINGLE('myFile'): I believe the single part is you specifying that you only want to upload one at a time. I think the myFile, inside of its method section, has to be the same as the name specified in the name section of  the input of type file.


---------------------------------------------------------------------------------
POST ROUTE REQUEST: I included this title, becuase this whole thing apparently only applies to the post request, and not the get request. I'm only going to talk about the stuff that we're not familiar with, and not how a regular post request works.

  SYNTAX:
    app.post('/', function(req, res){
      upload(req, res, function(err){
        if(err){
          if(err.code === 'LIMIT_FILE_SIZE'){
            res.json({success: false, message: 'File size is too large. Max limit is 10mb'});
          } else if(err.code === 'filetype'){
             res.json({success: false, message: 'No file type is invalid. Must be one of the following options jpeg, png, jpg, or wav'});
          } else {
            console.log(err);
            res.json({success: false, message: 'File could not be uploaded'});
          };
        } else{
          if(!req.file){
            res.json({ success: false, message: 'No file selected'});
          } else {
             res.json({ success: true, message: 'File was uploaded successfully!'});
          }
        }
      })
    })

    COMMENTS ON THE ABOVE REQUEST: This looks so long, because we have multiple if and else statements. but following are the main differences from a normal post request.

  UPLOAD: Notice that this upload is the variable we've defined above. Also notice the stuff that is going inside this section is everything relevant to the result we get from the upload.

  RES.JSON: I don't know if the response always has to be sent in json format, but I have a feeling it doesn't.

  ({SUCCESS: BOOLEAN}): Notice how inside of the response, you always have to state whether the operation was successful or not.

  MESSAGE: I don't know if there are other key value pair options besides the success and message ones, but those seem to be the 2 standard ones.

  REQ.FILE: I believe this is where the file is stored, in order for us to be able to use these images or files, in different parts of our site.


  ---------------------------------------------------------------------------------
  THINGS WE'RE STILL MISSING
  -Knowing how to use the uploaded files throughout our app.
  -Knowing how to use multer s3







////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        EXTRAS
  NOTE: I still don't know how this works. Definitely come back to this section and add an explanation.

  SOURCE EXPLANATION(The is the official explanation by this current source): When an image is received by the route, it will be automatically saved by multer to the directory you previously specified. The upload.single call is handled by the multer middleware.
  You can then acquire the file's name like so

  const host = req.host;
  const filePath = req.protocol + "://" + host + '/' + req.file.path;

  NOTE: Don't forget to make the project directory static, in order to serve your pictures using express.
